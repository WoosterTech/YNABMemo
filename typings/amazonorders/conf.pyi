"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Optional, Union

logger = ...
DEFAULT_CONFIG_DIR = ...
config_file_lock = ...
cookies_file_lock = ...
debug_output_file_lock = ...
class AmazonOrdersConfig:
    """
    An object containing ``amazon-orders``'s configuration. The state of this object is populated from the config file,
    if present, when it is instantiated, and it is also persisted back to the config file when :func:`~save` is called.

    If overrides are passed in ``data`` parameter when this object is instantiated, they will be used to populate the
    new object, but not persisted to the config file until :func:`~save` is called.

    Default values provisioned with the config can be found
    `here <https://amazon-orders.readthedocs.io/_modules/amazonorders/conf.html#AmazonOrdersConfig>`_.
    """
    def __init__(self, config_path: Optional[str] = ..., data: Optional[Dict[str, Any]] = ...) -> None:
        ...
    
    def __getattr__(self, key: str) -> Any:
        ...
    
    def __contains__(self, key: str) -> bool:
        ...
    
    def __getstate__(self) -> Dict[str, Any]:
        ...
    
    def __setstate__(self, state: Dict[str, Any]) -> None:
        ...
    
    def update_config(self, key: str, value: Union[str, int, float], save: bool = ...) -> None:
        """
        Update the given key/value pair in the config object. By default, this update will also be persisted to the
        config file. If only the object should be updated without persisting, pass ``save=False``.

        :param key: The key to be updated.
        :param value: The new value.
        :param save: ``True`` if the config should be persisted.
        """
        ...
    
    def save(self) -> None:
        """
        Persist the current state of this config object to the config file.
        """
        ...
    


