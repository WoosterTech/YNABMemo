"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from amazonorders.conf import AmazonOrdersConfig
from amazonorders.entity.order import Order
from amazonorders.session import AmazonSession

__copyright__ = ...
__license__ = ...
logger = ...
class AmazonOrders:
    """
    Using an authenticated :class:`~amazonorders.session.AmazonSession`, can be used to query Amazon
    for Order details and history.
    """
    def __init__(self, amazon_session: AmazonSession, debug: Optional[bool] = ..., config: Optional[AmazonOrdersConfig] = ...) -> None:
        ...
    
    def get_order(self, order_id: str, clone: Optional[Order] = ...) -> Order:
        """
        Get the full details for a given Amazon Order ID.

        :param order_id: The Amazon Order ID to lookup.
        :param clone: If a partially populated version of the Order has already been fetched from history.
        :return: The requested Order.
        """
        ...
    
    def get_order_history(self, year: int = ..., start_index: Optional[int] = ..., full_details: bool = ..., keep_paging: bool = ...) -> List[Order]:
        """
        Get the Amazon Order history for a given year.

        :param year: The year for which to get history.
        :param start_index: The index of the Order from which to start fetching in the history. See
            :attr:`~amazonorders.entity.order.Order.index` to correlate, or if a call to this method previously errored
            out, see ``index`` in the exception's :attr:`~amazonorders.exception.AmazonOrdersError.meta` to continue
            paging where it left off.
        :param full_details: Get the full details for each Order in the history. This will execute an additional
            request per Order.
        :param keep_paging: ``False`` if only one page should be fetched.
        :return: A list of the requested Orders.
        """
        ...
    


