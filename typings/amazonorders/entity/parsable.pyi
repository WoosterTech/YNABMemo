"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Dict, Optional, Type, Union
from bs4 import Tag
from amazonorders.conf import AmazonOrdersConfig

__copyright__ = ...
__license__ = ...
logger = ...
class Parsable:
    """
    A base class that contains a parsed representation of the entity, which can be extended to build an entity that
    utilizes the common the helper methods.
    """
    def __init__(self, parsed: Tag, config: AmazonOrdersConfig) -> None:
        ...
    
    def __getstate__(self) -> Dict:
        ...
    
    def safe_parse(self, parse_function: Callable[..., Any], **kwargs: Any) -> Any:
        """
        Execute the given parse function on a field, handling any common parse exceptions and passing
        them as warnings to the logger (suppressing them as exceptions).

        :param parse_function: The parse function to attempt safe execution.
        :param kwargs: The ``kwargs`` will be passed to ``parse_function``.
        :return: The return value from ``parse_function``.
        """
        ...
    
    def simple_parse(self, selector: Union[str, list], attr_name: Optional[str] = ..., text_contains: Optional[str] = ..., required: bool = ..., prefix_split: Optional[str] = ..., wrap_tag: Optional[Type] = ..., parse_date: bool = ..., prefix_split_fuzzy: bool = ..., suffix_split: Optional[str] = ..., suffix_split_fuzzy: bool = ...) -> Any:
        """
        Will attempt to extract the text value of the given CSS selector(s) for a field, and
        is suitable for most basic functionality on a well-formed page.

        The ``selector`` can be either a ``str`` or a ``list``. If a ``list`` is given, each
        selector in the list will be tried.

        In most cases the selected tag's text will be returned, but if ``wrap_tag`` is given, the
        tag itself (wrapped in the class) will be returned.

        :param selector: The CSS selector(s) for the field.
        :param attr_name: If provided, return the value of this attribute on the selected field.
        :param text_contains: Only select the field if this value is found in its text content.
        :param required: If required, an exception will be thrown instead of returning ``None``.
        :param prefix_split: Only select the field with the given prefix, returning the right side of the split if so.
        :param wrap_tag: Wrap the selected tag in this class before returning.
        :param parse_date: ``True`` if the resulting value should be fuzzy parsed in to a date (returning ``None`` if
            parsing fails).
        :param prefix_split_fuzzy: ``True`` if the value should still be used even if ``prefix_split`` is not found.
        :param suffix_split: Only select the field with the given suffix, returning the left side of the split if so.
        :param suffix_split_fuzzy: ``True`` if the value should still be used even if ``suffix_split`` is not found.
        :return: The cleaned up return value from the parsed ``selector``.
        """
        ...
    
    def safe_simple_parse(self, selector: Union[str, list], **kwargs: Any) -> Any:
        """
        A helper function that uses :func:`simple_parse` as the ``parse_function()`` passed to :func:`safe_parse`.

        :param selector: The CSS selector to pass to :func:`simple_parse`.
        :param kwargs: The ``kwargs`` will be passed to ``parse_function``.
        :return: The return value from :func:`simple_parse`.
        """
        ...
    
    def with_base_url(self, url: str) -> str:
        """
        If the given URL is relative, the ``BASE_URL`` will be prepended.

        :param url: The URL to check.
        :return: The fully qualified URL.
        """
        ...
    
    def to_currency(self, value: Union[str, int, float]) -> Union[int, float, None]:
        """
        Clean up a currency, stripping non-numeric values and returning it as a primitive.

        :param value: The currency to parse.
        :return: The currency as a primitive.
        """
        ...
    


